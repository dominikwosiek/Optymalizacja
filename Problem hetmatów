def het(n):
    s=w=k=p1=p2="" #s-suma,w-wiersz,k-kolumna,p1-przekatna 1,p2-przekatna 2
    for i in range(1,n+1):
        for j in range(1,n+1):
            s+="+"+"x"+str(i)+","+str(j) 
    print "Maximize \n",s
    print "\nSubject to "
    for i in range(1,n+1): #sprawdzamy ograniczenia na wiersze i kolumny
        for j in range(1,n+1):
            w+="+"+"x"+str(i)+","+str(j) 
            k+="+"+"x"+str(j)+","+str(i)  
        print w,"<=1 \n",k,"<=1"
        w=k=""
    i_1=n #poczatek sprawdzania ograniczenia dla przekatnych
    j_1=i_2=j_2=1 #startujemy w x1,1 (przekÄ…tne od prawej do lewej) oraz xn,1 (przekatne od lewej do prawej)
    odzysk=0 #zmienna pomocnicza
    while (i_1!=1 or j_1!=(n-1)): #szachownica jest symetryczna wiec tylko warunek dla i_1
        if i_1-1>0:         #koniunkcja zamienia sie na alternatywe przy negacji
            i_1-=1
            j_2+=1
            while i_1!=n+1:
                p1+="+"+"x"+str(i_1)+","+str(j_1)   
                p2+="+"+"x"+str(i_2)+","+str(j_2)   
                i_1+=1
                j_1+=1
                i_2+=1
                j_2-=1
                odzysk+=1
            print p1,"<= 1","\n",p2,"<= 1"
            p1=p2=""
            i_1-=odzysk
            j_1-=odzysk
            i_2-=odzysk
            j_2+=odzysk
            odzysk=0
        elif j_1+1<n+1:
            j_1+=1
            i_2+=1
            while j_1!=n+1:
                p1+="+"+"x"+str(i_1)+","+str(j_1)   
                p2+="+"+"x"+str(i_2)+","+str(j_2)   
                i_1+=1
                j_1+=1
                i_2+=1
                j_2-=1
                odzysk+=1
            print p1, "<= 1","\n",p2,"<= 1"
            p1=p2="" 
            i_1-=odzysk
            j_1-=odzysk
            i_2-=odzysk
            j_2+=odzysk
            odzysk=0   #mozemy pominac wypisywanie ograniczen jednoelementowych
    print "\nBounds \n\nGenerals " 
    for i in range(1,n+1):
        for j in range(1,n+1):
            print "x%s,%s" %(i,j)
    print "\nend"

het(3) #3 mozemy zamienic na dowolne n, wtedy wymiar nxn
